%%%% EEG Preprocessing Pipeline
%%%% Adapted for MI and Rest conditions
%%%% Markers: 'S  3' (MI) and 'S  4' (Rest)
%%%% Epoch: [-2 3] seconds

clear all;
close all;
clc;

%% Set paths
path_to_rawdata = './data/';
path_to_epoched = './epoched/';

% Create output directory if it doesn't exist
if ~exist(path_to_epoched, 'dir')
    mkdir(path_to_epoched);
end

%% Define parameters
nSubject = 1;  % Number of subjects
filename = 'CBH0014';  % or choose a specific file

% Define events of interest
events = {'S  3', 'MI';    % Motor Imagery
          'S  4', 'Rest'};  % Rest condition

% Epoch parameters
epoch_period = [-2 3];          % -2 to 3 seconds
baseline_period = [-500 0];     % -500ms to 0ms baseline

% Load channel locations
load reference\NewEasyCap63.mat  % Assuming this file exists

%% Main preprocessing loop
for sub = 1:nSubject
    
    fprintf('Processing Subject %d/%d\n', sub, nSubject);
    
    % Load raw data
    if (filename == "")
        set_file = [path_to_rawdata 'MIT' int2str(sub) '.vhdr'];
    else
        set_file = [path_to_rawdata '' filename '.vhdr'];
    end
    
    display(set_file)

    if ~exist(set_file, 'file')
        % fprintf('Warning: File not found for subject %d\n', sub);
        % continue;
    end
    
    fprintf('Reading %s...\n', set_file);
    
    % Load EEG data
    EEG = pop_fileio(set_file);
    
    % Set channel locations
    EEG.chanlocs = struct(chanlocsEasyCapNoRef);
    EEG = eeg_checkset(EEG);
    
    % Add reference channel FCz as channel 64
    EEG = pop_chanedit(EEG, 'append', 63, ...
        'changefield', {64 'labels' 'FCz'}, ...
        'changefield', {64 'X' '0.383'}, ...
        'changefield', {64 'Y' '0'}, ...
        'changefield', {64 'Z' '0.923'}, ...
        'convert', {'cart2all'});
    EEG = eeg_checkset(EEG);
    
    %% Channel removal
    % Remove bad channels (FT9, FT10, TP9, TP10)
    ex_channels = [5 10 21 27];
    EEG = pop_select(EEG, 'nochannel', ex_channels);
    nCh = EEG.nbchan;
    
    %% Filtering
    fprintf('Applying filters...\n');
    
    % Bandpass filter [0.1-85Hz]
    EEG = pop_eegfiltnew(EEG, 0.1, 85, 33000, 0, [], 1);
    EEG = eeg_checkset(EEG);
    
    % Notch filter at 50Hz
    EEG = pop_eegfiltnew(EEG, 49.5, 50.5, 8250, 1, [], 1);
    EEG = eeg_checkset(EEG);
    close all;
    
    %% Artifact Subspace Reconstruction (ASR)
    fprintf('Running ASR...\n');
    
    % Store channel info before ASR
    infoCh = {EEG.chanlocs.labels};
    saveEEG = struct(EEG);
    
    % Apply ASR
    EEG = clean_rawdata(EEG, 10, [0.25 0.75], 0.8, 4, 20, 0.5);
    
    nChMiss = EEG.nbchan;
    [M, N] = size(EEG.data);
    
    %% Find and interpolate missing channels
    % Expand data matrix to original size
    EEG.data = [EEG.data(:,:); zeros(nCh-nChMiss, N)];
    
    missCh = {};
    missChNum = [];
    
    for i = 1:nCh
        temp = max(strcmp(infoCh(i), {EEG.chanlocs.labels}));
        if temp == 0
            missCh = [missCh infoCh(i)];
            missChNum = [missChNum i];
            EEG.data(i+1:end,:) = EEG.data(i:end-1,:);
            EEG.data(i,:) = zeros(1, N);
        end
    end
    
    % Restore original channel structure
    EEG.nbchan = saveEEG.nbchan;
    EEG.chanlocs = struct(saveEEG.chanlocs);
    EEG = eeg_checkset(EEG);
    
    % Interpolate missing channels
    if ~isempty(missChNum)
        fprintf('Interpolating %d channels...\n', length(missChNum));
        EEG = pop_interp(EEG, missChNum, 'spherical');
        EEG = eeg_checkset(EEG);
    end
    
    %% Common Average Reference (CAR)
    fprintf('Applying CAR...\n');
    
    % Re-reference to average with FCz retained
    EEG = pop_reref(EEG, [], 'refloc', struct(...
        'theta', {0}, ...
        'radius', {0.1252}, ...
        'labels', {'FCz'}, ...
        'sph_theta', {0}, ...
        'sph_phi', {67.4639}, ...
        'X', {0.383}, ...
        'Y', {0}, ...
        'Z', {0.923}, ...
        'sph_radius', {0.99931}, ...
        'type', {''}, ...
        'ref', {''}, ...
        'urchan', {[]}, ...
        'datachan', {0}));
    EEG = eeg_checkset(EEG);
    
    %% Clean events
    % Remove empty markers, fix broken ones
    del = 0;
    for j = 1:size(EEG.event, 2)
        if strcmp(EEG.event(j-del).type, 'empty')
            EEG.event(j-del) = [];
            del = del + 1;
        end
    end
    
    countMI = 0;
    countRest = 0;
    for j = 1:size(EEG.event, 2)
        % issue in initial Unity code sent S3 instead of S7 for gold coins
        if strcmp(EEG.event(j).type, 'S  3')
            countMI = countMI + 1;
            sprintf( 'Prev marker: %s', EEG.event(j + 1).type );
            if(strcmp(EEG.event(j - 1).type, 'S  2') == 0)
                sprintf( 'Prev marker: %s', EEG.event(j + 1).type );
                EEG.event(j).type = 'S  7';
            end
        elseif strcmp(EEG.event(j).type, 'S  4')
            countRest = countRest + 1;
        end

        if(countMI )
    end
    
    %% Epoching for MI and Rest conditions
    fprintf('Epoching data...\n');
    
    for evt = 1:size(events, 1)
        
        % Create filename
        epoch_file = sprintf('%s_%d_%s.set', filename, sub, events{evt, 2});
        
        % Extract epochs
        fprintf('Processing %s condition...\n', events{evt, 2});
        
        % Epoch around event
        epoch = pop_epoch(EEG, events(evt, 1), epoch_period, 'epochinfo', 'yes');
        
        % Apply baseline correction
        epoch = pop_rmbase(epoch, baseline_period);
        epoch = eeg_checkset(epoch);
        
        % Display epoch info
        fprintf('  - Number of epochs: %d\n', epoch.trials);
        fprintf('  - Epoch length: %.1f seconds\n', epoch.xmax - epoch.xmin);
        
        % Save epoched data
        epoch = pop_saveset(epoch, ...
            'filename', epoch_file, ...
            'filepath', path_to_epoched, ...
            'savemode', 'onefile');
        
        fprintf('  - Saved: %s\n', fullfile(path_to_epoched, epoch_file));
    end
    
    fprintf('Subject %d completed!\n\n', sub);
end

fprintf('Preprocessing completed for all subjects!\n');